version: '3.8'

services:
  # API Gateway
  kong:
    image: kong:3.3.1-alpine
    container_name: hotlabel-kong
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/usr/local/kong/declarative/kong.yml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    volumes:
      - ./kong/kong.yml:/usr/local/kong/declarative/kong.yml
    networks:
      - hotlabel-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  # Shared Database
  postgres:
    image: postgres:15-alpine
    container_name: hotlabel-postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=hotlabel_publishers,hotlabel_tasks,hotlabel_qa,hotlabel_users
    volumes:
      - ./postgres/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - hotlabel-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  # Redis for caching and message brokering
  redis:
    image: redis:7-alpine
    container_name: hotlabel-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - hotlabel-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  # Publisher Management Service
  publishers:
    image: hotoro-cloud/hotlabel-publishers:latest
    container_name: hotlabel-publishers
    build:
      context: https://github.com/Hotoro-Cloud/hotlabel-publishers.git
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/hotlabel_publishers
      - REDIS_URL=redis://redis:6379/0
      - API_V1_STR=/api/v1
      - SERVICE_NAME=publisher-management
    depends_on:
      - postgres
      - redis
    networks:
      - hotlabel-network
    restart: always

  # Task Management Service
  tasks:
    image: hotoro-cloud/hotlabel-tasks:latest
    container_name: hotlabel-tasks
    build:
      context: https://github.com/Hotoro-Cloud/hotlabel-tasks.git
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/hotlabel_tasks
      - REDIS_URL=redis://redis:6379/1
      - API_V1_STR=/api/v1
      - SERVICE_NAME=task-management
      - QA_SERVICE_URL=http://qa:8000/api/v1
      - USERS_SERVICE_URL=http://users:8000/api/v1
    depends_on:
      - postgres
      - redis
    networks:
      - hotlabel-network
    restart: always

  # Quality Assurance Service
  qa:
    image: hotoro-cloud/hotlabel-qa:latest
    container_name: hotlabel-qa
    build:
      context: https://github.com/Hotoro-Cloud/hotlabel-qa.git
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/hotlabel_qa
      - REDIS_URL=redis://redis:6379/2
      - API_V1_STR=/api/v1
      - SERVICE_NAME=quality-assurance
      - TASKS_SERVICE_URL=http://tasks:8000/api/v1
    depends_on:
      - postgres
      - redis
    networks:
      - hotlabel-network
    restart: always

  # User Profiling Service
  users:
    image: hotoro-cloud/hotlabel-users:latest
    container_name: hotlabel-users
    build:
      context: https://github.com/Hotoro-Cloud/hotlabel-users.git
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/hotlabel_users
      - REDIS_URL=redis://redis:6379/3
      - API_V1_STR=/api/v1
      - SERVICE_NAME=user-profiling
    depends_on:
      - postgres
      - redis
    networks:
      - hotlabel-network
    restart: always

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: hotlabel-prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - hotlabel-network
    restart: always

  # Grafana for visualization
  grafana:
    image: grafana/grafana:9.5.2
    container_name: hotlabel-grafana
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - hotlabel-network
    restart: always

networks:
  hotlabel-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:

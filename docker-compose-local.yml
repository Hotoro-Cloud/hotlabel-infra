version: '3.8'

services:
  # API Gateway
  kong:
    image: kong/kong:3.4
    container_name: hotlabel-kong
    environment:
      KONG_DATABASE: "off"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    volumes:
      - ./kong:/usr/local/kong/declarative
    networks:
      - hotlabel-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: always

  # Shared Database
  postgres:
    image: postgres:15
    container_name: hotlabel-postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=hotlabel_users,hotlabel_tasks,hotlabel_qa,hotlabel_publishers
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/create-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/create-multiple-postgresql-databases.sh
    networks:
      - hotlabel-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

  # Redis for caching and message brokering
  redis:
    image: redis:7
    container_name: hotlabel-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - hotlabel-network

  # Publisher Management Service
  publishers:
    build:
      context: ../hotlabel-publishers
      dockerfile: Dockerfile
    container_name: hotlabel-publishers
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/hotlabel_publishers
      - REDIS_URL=redis://redis:6379/4
      - SERVICE_NAME=hotlabel-publishers
      - SERVICE_PORT=8004
      - LOG_LEVEL=info
      - TASKS_SERVICE_URL=http://tasks:8002
    ports:
      - "8004:8004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      tasks:
        condition: service_started
    volumes:
      - ../hotlabel-publishers:/app
    networks:
      - hotlabel-network
    restart: always

  # Task Management Service
  tasks:
    build:
      context: ../hotlabel-tasks
      dockerfile: Dockerfile
    container_name: hotlabel-tasks
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/hotlabel_tasks
      - REDIS_URL=redis://redis:6379/2
      - SERVICE_NAME=hotlabel-tasks
      - SERVICE_PORT=8002
      - LOG_LEVEL=info
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../hotlabel-tasks:/app
    networks:
      - hotlabel-network
    restart: always

  # Quality Assurance Service
  qa:
    build:
      context: ../hotlabel-qa
      dockerfile: Dockerfile
    container_name: hotlabel-qa
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/hotlabel_qa
      - REDIS_URL=redis://redis:6379/3
      - SERVICE_NAME=hotlabel-qa
      - SERVICE_PORT=8003
      - LOG_LEVEL=info
    ports:
      - "8003:8003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../hotlabel-qa:/app
    networks:
      - hotlabel-network
    restart: always

  # User Management Service
  users:
    build:
      context: ../hotlabel-users
      dockerfile: Dockerfile
    container_name: hotlabel-users
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/hotlabel_users
      - REDIS_URL=redis://redis:6379/1
      - SERVICE_NAME=hotlabel-users
      - SERVICE_PORT=8005
      - LOG_LEVEL=info
    ports:
      - "8005:8005"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../hotlabel-users:/app
    networks:
      - hotlabel-network
    restart: always

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: hotlabel-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - hotlabel-network
    restart: always

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: hotlabel-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - hotlabel-network
    restart: always

networks:
  hotlabel-network:
    name: hotlabel-network

volumes:
  postgres_data:
  prometheus_data:
  grafana_data: